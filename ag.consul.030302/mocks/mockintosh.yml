# This is a Mockintosh configuration file.
# Mockintosh provides a microservices friendly, small footprint HTTP mock service.
# A standard laptop can run dozens of Mockintosh instances, or you can run all instances in a single Docker container.
#
# Install Mockintosh:                 pip3 install mockintosh
# Run locally:                        mockintosh <this-file>
# Run with Docker:                    docker run -it -p 8000-8005:8000-8005 -v `pwd`:/tmp testrio/mockintosh /tmp/<this-file>
# More information can be found here: https://github.com/up9inc/mockintosh

---
management:
  port: 8000
services:
- name: http://carts
  port: 8001
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___carts-spec.json'
  endpoints:
  - path: /carts/{{customerId}}/merge
    response:
      status: 202
  - path: /carts/{{customerId}}/items
    response:
      headers:
        Content-Type: application/json
      body: '[]'
  - path: /carts/{{customerId}}
    response:
      status: 202
    method: delete
  - path: /carts/{{customerId}}/items
    response:
      status: 201
      headers:
        Content-Type: application/json
      body: |-
        {
         "id": "6053f8fb67e0e200086c1d8e",
         "itemId": "{{request.body}}",
         "quantity": 1,
         "unitPrice": {{random.float 7.99 99.99 2}}
        }
    method: post
- name: http://catalogue
  port: 8002
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___catalogue-spec.json'
  endpoints:
  - path: /catalogue/size
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "size": 9,
         "err": null
        }
      useTemplating: false
  - path: /catalogue
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_10.json'
  - path: /tags
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "tags": [
          "brown",
          "geek",
          "formal",
          "blue",
          "skin",
          "red",
          "action",
          "sport",
          "black",
          "magic",
          "green"
         ],
         "err": null
        }
      useTemplating: false
  - path: /catalogue/{{id}}
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_54.json'
- name: http://front-end
  port: 8003
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___front-end-spec.json'
  endpoints:
  - path: /
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_1.html'
      useTemplating: false
  - path: /cart
    response:
      headers:
        Content-Type: application/json
      body: '[]'
      useTemplating: false
  - path: /catalogue/size
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "size": 9,
         "err": null
        }
      useTemplating: false
  - path: /catalogue
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_4.json'
  - path: /customers/{{customerId}}
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_5.json'
      useTemplating: false
  - path: /index.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_6.html'
      useTemplating: false
  - path: /orders
    response:
      status: 201
      headers:
        Content-Type: application/json
      body: '[]'
      useTemplating: false
  - path: /tags
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "tags": [
          "brown",
          "geek",
          "formal",
          "blue",
          "skin",
          "red",
          "action",
          "sport",
          "black",
          "magic",
          "green"
         ],
         "err": null
        }
      useTemplating: false
  - path: /footer.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_23.html'
      useTemplating: false
  - path: /login
    response:
      headers:
        Content-Type: text/html
      body: Cookie is set
      useTemplating: false
  - path: /{{param}}
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_26.html'
      useTemplating: false
  - path: /topbar.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_27.html'
      useTemplating: false
  - path: /customers/{{customerId}}
    response:
      body: no healthy upstream
      useTemplating: false
  - path: /category.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_34.html'
      useTemplating: false
  - path: /catalogue/size
    response: {}
  - path: /catalogue
    response: {}
  - path: /tags
    response: {}
  - path: /cart
    response:
      status: 202
    method: delete
  - path: /detail.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_45.html'
      useTemplating: false
  - path: /catalogue/{{id}}
    response: {}
  - path: /basket.html
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_59.html'
      useTemplating: false
  - path: /cart
    response:
      status: 201
    method: post
  - path: /orders
    response:
      status: 201
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_66.json'
    method: post
- name: http://mockintosh
  port: 8004
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___mockintosh-spec.json'
  endpoints:
  - path: /customers/{{id}}
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_17.json'
  - path: /customers/undefined
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_18.json'
      useTemplating: false
  - path: /login
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_19.json'
      useTemplating: false
  - path: /
    response:
      headers:
        Content-Type: text/html
      body: '@mock-data/resp_39.html'
      useTemplating: false
  - path: /catalogue
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_47.json'
  - path: /catalogue/size
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "size": 9,
         "err": null
        }
      useTemplating: false
  - path: /tags
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "tags": [
          "brown",
          "geek",
          "formal",
          "blue",
          "skin",
          "red",
          "action",
          "sport",
          "black",
          "magic",
          "green"
         ],
         "err": null
        }
      useTemplating: false
- name: http://orders
  port: 8005
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___orders-spec.json'
  endpoints:
  - path: /orders/search/customerId
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "_embedded": {
          "customerOrders": []
         },
         "_links": {
          "self": {
           "href": "http://127.0.0.1:15200/orders/search/customerId?sort=date&custId=undefined"
          }
         }
        }
      useTemplating: false
  - path: /orders
    response:
      status: 201
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_57.json'
    method: post
- name: http://payment
  port: 8006
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___payment-spec.json'
  endpoints:
  - path: /paymentAuth
    response:
      headers:
        Content-Type: application/json
      body: |-
        {
         "authorised": true,
         "message": "Payment authorised"
        }
      useTemplating: false
    method: post
- name: http://shipping
  port: 8007
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___shipping-spec.json'
  endpoints:
  - path: /shipping
    response:
      status: 201
      headers:
        Content-Type: application/json
      body: |-
        {
         "id": "{{request.body}}",
         "name": "{{request.body}}"
        }
    method: post
- name: http://user
  port: 8008
  ssl: false
  managementRoot: __admin
  oas: '@mock-data/up9-http___user-spec.json'
  endpoints:
  - path: /customers/{{customerId}}
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_15.json'
  - path: /login
    response:
      headers:
        Content-Type: application/json
      body: '@mock-data/resp_16.json'
      useTemplating: false
