package up9_autogenerated_tests

import (
    . "authentication"
    . "up9lib"
    assert "github.com/stretchr/testify/assert"
    testing "testing"
)

func TestGet01(t *testing.T) {
    // GET http://front-end/ (endp 1)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    resp := frontEnd.Get(req, "/")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "div#hot div.box div.container div h2", resp), "Hot this week")
}

func TestGetParam26(t *testing.T) {
    param := "navbar.html"

    // GET http://front-end/{param} (endp 26)
    param := "navbar.html"
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/" + param.(string))
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetCart02(t *testing.T) {
    // GET http://front-end/cart (endp 2)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/cart")
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetCatalogue04(t *testing.T) {
    size := "5"

    // GET http://front-end/catalogue (endp 4)
    size := "5"
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetQueryString(map[string]interface{}{
        "page": "1",
        "size": size,
        "tags": "",
    })
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/catalogue")
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetCatalogueSize03(t *testing.T) {
    // GET http://front-end/catalogue/size (endp 3)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetQueryString(map[string]interface{}{
        "tags": "",
    })
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/catalogue/size")
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetCategoryHtml34(t *testing.T) {
    // GET http://front-end/category.html (endp 34)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    resp := frontEnd.Get(req, "/category.html")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "div#content div.container div div.panel.panel-default.sidebar-menu div.panel-heading h3.panel-title", resp), "Filters ")
}

func TestGetCustomersCustomerid05(t *testing.T) {
    customerId := "7w4TGI0pnIxn5TEFoHX6O2spPdXa3dut"

    // GET http://front-end/customers/{customerId} (endp 5)
    customerId := "7w4TGI0pnIxn5TEFoHX6O2spPdXa3dut"
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/customers/" + customerId.(string))
    assert.Equal(t, 200, resp.StatusCode())
    assert.Equal(t, "Name", JsonPath(t, "$.lastName", resp.String()))
}

func TestGetCustomersCustomerid30(t *testing.T) {
    customerId := "7w4TGI0pnIxn5TEFoHX6O2spPdXa3dut"

    // GET http://front-end/customers/{customerId} (endp 30)
    customerId := "7w4TGI0pnIxn5TEFoHX6O2spPdXa3dut"
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/customers/" + customerId.(string))
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetFooterHtml23(t *testing.T) {
    // GET http://front-end/footer.html (endp 23)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/footer.html")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "div#copyright div.container div p.pull-left a", resp), "Weaveworks")
}

func TestGetIndexHtml06(t *testing.T) {
    // GET http://front-end/index.html (endp 6)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    resp := frontEnd.Get(req, "/index.html")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "div#hot div.box div.container div h2", resp), "Hot this week")
}

// authentication-related test
func TestGetLogin25(t *testing.T) {
    // GET http://front-end/login (endp 25)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(DummyAuth))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/login")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "p", resp), "Cookie is set")
}

func TestGetOrders07(t *testing.T) {
    // GET http://front-end/orders (endp 7)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/orders")
    assert.Equal(t, 201, resp.StatusCode())
}

func TestGetTags08(t *testing.T) {
    // GET http://front-end/tags (endp 8)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/tags")
    assert.Equal(t, 200, resp.StatusCode())
}

func TestGetTopbarHtml27(t *testing.T) {
    // GET http://front-end/topbar.html (endp 27)
    frontEnd := GetHttpTarget(t, "TARGET_FRONT_END", new(Authentication))
    req := new(HttpRequest)
    req.SetHeaders(map[string]interface{}{
        "x-requested-with": "XMLHttpRequest",
    })
    resp := frontEnd.Get(req, "/topbar.html")
    assert.Equal(t, 200, resp.StatusCode())
    assert.Contains(t, CssSelect(t, "div#top div.container div.offer a.btn.btn-success.btn-sm", resp), "Offer of the day")
}
