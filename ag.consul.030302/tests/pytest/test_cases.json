{
 "1": "    @clear_session({'spanId': 1})\n    def test_01_get_(self):\n        # GET http://front-end/ (endp 1)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('div#hot div.box div.container div h2', expected_value='Hot this week')\n\n",
 "26": "    @json_dataset('data/dataset_26.json')\n    @clear_session({'spanId': 26})\n    def test_26_get_param(self, data_row):\n        param, = data_row\n\n        # GET http://front-end/{param} (endp 26)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get(f'/{param}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "2": "    @clear_session({'spanId': 2})\n    def test_02_get_cart(self):\n        # GET http://front-end/cart (endp 2)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/cart', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "4": "    @json_dataset('data/dataset_4.json')\n    @clear_session({'spanId': 4})\n    def test_04_get_catalogue(self, data_row):\n        size, = data_row\n\n        # GET http://front-end/catalogue (endp 4)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('tags', '')])\n        resp = front_end.get('/catalogue' + qstr, headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "3": "    @clear_session({'spanId': 3})\n    def test_03_get_catalogue_size(self):\n        # GET http://front-end/catalogue/size (endp 3)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        qstr = '?' + urlencode([('tags', '')])\n        resp = front_end.get('/catalogue/size' + qstr, headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "5": "    @json_dataset('data/dataset_5.json')\n    @clear_session({'spanId': 5})\n    def test_05_get_customers_customerId(self, data_row):\n        customerId, = data_row\n\n        # GET http://front-end/customers/{customerId} (endp 5)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get(f'/customers/{customerId}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "30": "    @json_dataset('data/dataset_30.json')\n    @clear_session({'spanId': 30})\n    def test_30_get_customers_customerId(self, data_row):\n        customerId, = data_row\n\n        # GET http://front-end/customers/{customerId} (endp 30)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get(f'/customers/{customerId}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "23": "    @clear_session({'spanId': 23})\n    def test_23_get_footer_html(self):\n        # GET http://front-end/footer.html (endp 23)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/footer.html', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('div#copyright div.container div p.pull-left a', expected_value='Weaveworks')\n\n",
 "6": "    @clear_session({'spanId': 6})\n    def test_06_get_index_html(self):\n        # GET http://front-end/index.html (endp 6)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/index.html')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('div#hot div.box div.container div h2', expected_value='Hot this week')\n\n",
 "25": "    # authentication-related test\n    @clear_session({'spanId': 25})\n    def test_25_get_login(self):\n        # GET http://front-end/login (endp 25)\n        front_end = get_http_target('TARGET_FRONT_END', dummy_auth)\n        resp = front_end.get('/login', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('p', expected_value='Cookie is set')\n\n",
 "7": "    @clear_session({'spanId': 7})\n    def test_07_get_orders(self):\n        # GET http://front-end/orders (endp 7)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(201)\n\n",
 "8": "    @clear_session({'spanId': 8})\n    def test_08_get_tags(self):\n        # GET http://front-end/tags (endp 8)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/tags', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "27": "    @clear_session({'spanId': 27})\n    def test_27_get_topbar_html(self):\n        # GET http://front-end/topbar.html (endp 27)\n        front_end = get_http_target('TARGET_FRONT_END', authenticate)\n        resp = front_end.get('/topbar.html', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('div#top div.container div.offer a.btn.btn-success.btn-sm', expected_value='Offer of the day')\n\n",
 "13": "    @json_dataset('data/dataset_13.json')\n    @clear_session({'spanId': 13})\n    def test_13_get_carts_id_items(self, data_row):\n        id_, = data_row\n\n        # GET http://carts/carts/{id}/items (endp 13)\n        carts = get_http_target('TARGET_CARTS', authenticate)\n        resp = carts.get(f'/carts/{id_}/items')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "12": "    @json_dataset('data/dataset_12.json')\n    @clear_session({'spanId': 12})\n    def test_12_get_carts_id_merge(self, data_row):\n        id_, sessionId = data_row\n\n        # GET http://carts/carts/{id}/merge (endp 12)\n        carts = get_http_target('TARGET_CARTS', authenticate)\n        qstr = '?' + urlencode([('sessionId', sessionId)])\n        resp = carts.get(f'/carts/{id_}/merge' + qstr)\n        resp.assert_ok()\n        # resp.assert_status_code(202)\n\n",
 "10": "    @json_dataset('data/dataset_10.json')\n    @clear_session({'spanId': 10})\n    def test_10_get_catalogue(self, data_row):\n        size, = data_row\n\n        # GET http://catalogue/catalogue (endp 10)\n        catalogue = get_http_target('TARGET_CATALOGUE', authenticate)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('tags', '')])\n        resp = catalogue.get('/catalogue' + qstr)\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "9": "    @clear_session({'spanId': 9})\n    def test_09_get_catalogue_size(self):\n        # GET http://catalogue/catalogue/size (endp 9)\n        catalogue = get_http_target('TARGET_CATALOGUE', authenticate)\n        qstr = '?' + urlencode([('tags', '')])\n        resp = catalogue.get('/catalogue/size' + qstr)\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "11": "    @clear_session({'spanId': 11})\n    def test_11_get_tags(self):\n        # GET http://catalogue/tags (endp 11)\n        catalogue = get_http_target('TARGET_CATALOGUE', authenticate)\n        resp = catalogue.get('/tags')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n",
 "17": "    @json_dataset('data/dataset_17.json')\n    @clear_session({'spanId': 17})\n    def test_17_get_customers_id(self, data_row):\n        id_, = data_row\n\n        # GET http://mockintosh/customers/{id} (endp 17)\n        mockintosh = get_http_target('TARGET_MOCKINTOSH', authenticate)\n        resp = mockintosh.get(f'/customers/{id_}')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "18": "    @clear_session({'spanId': 18})\n    def test_18_get_customers_undefined(self):\n        # GET http://mockintosh/customers/undefined (endp 18)\n        mockintosh = get_http_target('TARGET_MOCKINTOSH', authenticate)\n        resp = mockintosh.get('/customers/undefined')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "19": "    # authentication-related test\n    @clear_session({'spanId': 19})\n    def test_19_get_login(self):\n        # GET http://mockintosh/login (endp 19)\n        mockintosh = get_http_target('TARGET_MOCKINTOSH', dummy_auth)\n        resp = mockintosh.get('/login')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n\n",
 "15": "    @json_dataset('data/dataset_15.json')\n    @clear_session({'spanId': 15})\n    def test_15_get_customers_id(self, data_row):\n        id_, = data_row\n\n        # GET http://user/customers/{id} (endp 15)\n        user = get_http_target('TARGET_USER', authenticate)\n        resp = user.get(f'/customers/{id_}')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "16": "    # authentication-related test\n    @clear_session({'spanId': 16})\n    def test_16_get_login(self):\n        # GET http://user/login (endp 16)\n        user = get_http_target('TARGET_USER', dummy_auth)\n        resp = user.get('/login')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n\n",
 "14": "    @clear_session({'spanId': 14})\n    def test_14_get_orders_search_customerId(self):\n        # GET http://orders/orders/search/customerId (endp 14)\n        orders = get_http_target('TARGET_ORDERS', authenticate)\n        qstr = '?' + urlencode([('custId', 'undefined'), ('sort', 'date')])\n        resp = orders.get('/orders/search/customerId' + qstr)\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n\n"
}