{
 "22": "    @clear_session({'spanId': 22})\n    def test_22_delete_carts_customerId(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # DELETE http://carts/carts/{customerId} (endp 22)\n        carts = get_http_client('http://carts', authenticate)\n        resp = carts.delete(f'/carts/{customerId}')\n        resp.assert_status_code(202)\n\n",
 "23": "    @json_dataset('data/dataset_23.json')\n    @clear_session({'spanId': 23})\n    def test_23_post_carts_customerId_items(self, data_row):\n        size, = data_row\n\n        # GET http://catalogue/tags (endp 30)\n        catalogue = get_http_client('http://catalogue', authenticate)\n        resp = catalogue.get('/tags')\n        resp.assert_status_code(200)\n        tags = jsonpath('$.tags[*]', resp)\n\n        # GET http://catalogue/catalogue (endp 29)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('sort', 'id'), ('tags', tags)])\n        resp = catalogue.get('/catalogue' + qstr)\n        resp.assert_status_code(200)\n        itemId = jsonpath('$[*].id', resp)\n        unitPrice = jsonpath('$[*].price', resp)\n\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # POST http://carts/carts/{customerId}/items (endp 23)\n        carts = get_http_client('http://carts', authenticate)\n        with open('data/payload_for_endp_23.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.itemId', itemId)\n        apply_into_json(json_payload, '$.unitPrice', unitPrice)\n        resp = carts.post(f'/carts/{customerId}/items', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n\n",
 "26": "    @clear_session({'spanId': 26})\n    def test_26_get_carts_customerId_items(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # GET http://carts/carts/{customerId}/items (endp 26)\n        carts = get_http_client('http://carts', authenticate)\n        resp = carts.get(f'/carts/{customerId}/items', headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(200)\n\n",
 "24": "    @json_dataset('data/dataset_24.json')\n    @clear_session({'spanId': 24})\n    def test_24_get_carts_customerId_merge(self, data_row):\n        sessionId, = data_row\n\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # GET http://carts/carts/{customerId}/merge (endp 24)\n        carts = get_http_client('http://carts', authenticate)\n        qstr = '?' + urlencode([('sessionId', sessionId)])\n        resp = carts.get(f'/carts/{customerId}/merge' + qstr)\n        resp.assert_status_code(202)\n\n",
 "29": "    @json_dataset('data/dataset_29.json')\n    @clear_session({'spanId': 29})\n    def test_29_get_catalogue(self, data_row):\n        size, = data_row\n\n        # GET http://catalogue/tags (endp 30)\n        catalogue = get_http_client('http://catalogue', authenticate)\n        resp = catalogue.get('/tags')\n        resp.assert_status_code(200)\n        tags = jsonpath('$.tags[*]', resp)\n\n        # GET http://catalogue/catalogue (endp 29)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('sort', 'id'), ('tags', tags)])\n        resp = catalogue.get('/catalogue' + qstr)\n        resp.assert_status_code(200)\n\n",
 "13": "    @clear_session({'spanId': 13})\n    def test_13_get_catalogue_id(self):\n        # GET http://front-end/orders (endp 19)\n        front_end = get_http_client('http://front-end', authenticate)\n        resp = front_end.get('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$[*].address.city', expected_value='Glasgow')\n        id_ = jsonpath('$[*].items[*].itemId', resp)\n\n        # GET http://front-end/catalogue/{id} (endp 13)\n        resp = front_end.get(f'/catalogue/{id_}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n\n",
 "27": "    @json_dataset('data/dataset_27.json')\n    @clear_session({'spanId': 27})\n    def test_27_get_catalogue_id(self, data_row):\n        size, = data_row\n\n        # GET http://catalogue/tags (endp 30)\n        catalogue = get_http_client('http://catalogue', authenticate)\n        resp = catalogue.get('/tags')\n        resp.assert_status_code(200)\n        tags = jsonpath('$.tags[*]', resp)\n\n        # GET http://catalogue/catalogue (endp 29)\n        qstr = '?' + urlencode([('page', '1'), ('size', size), ('sort', 'id'), ('tags', tags)])\n        resp = catalogue.get('/catalogue' + qstr)\n        resp.assert_status_code(200)\n        id_ = jsonpath('$[*].id', resp)\n\n        # GET http://catalogue/catalogue/{id} (endp 27)\n        resp = catalogue.get(f'/catalogue/{id_}')\n        resp.assert_status_code(200)\n\n",
 "28": "    @json_dataset('data/dataset_28.json')\n    @clear_session({'spanId': 28})\n    def test_28_get_catalogue_size(self, data_row):\n        tags, = data_row\n\n        # GET http://catalogue/catalogue/size (endp 28)\n        catalogue = get_http_client('http://catalogue', authenticate)\n        qstr = '?' + urlencode([('tags', tags)])\n        resp = catalogue.get('/catalogue/size' + qstr)\n        resp.assert_status_code(200)\n\n",
 "31": "    @clear_session({'spanId': 31})\n    def test_31_get_customers_customerId(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # GET http://user/customers/{customerId} (endp 31)\n        resp = user.get(f'/customers/{customerId}')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.lastName', expected_value='Name')\n\n",
 "33": "    @clear_session({'spanId': 33})\n    def test_33_get_customers_customerId_addresses(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # GET http://user/customers/{customerId}/addresses (endp 33)\n        resp = user.get(f'/customers/{customerId}/addresses')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$._embedded.address[*].city', expected_value='Glasgow')\n\n",
 "34": "    @clear_session({'spanId': 34})\n    def test_34_get_customers_customerId_cards(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n        customerId = jsonpath('$.user.id', resp)\n\n        # GET http://user/customers/{customerId}/cards (endp 34)\n        resp = user.get(f'/customers/{customerId}/cards')\n        resp.assert_status_code(200)\n\n",
 "32": "    @clear_session({'spanId': 32})\n    def test_32_get_login(self):\n        # GET http://user/login (endp 32)\n        user = get_http_client('http://user', authenticate)\n        resp = user.get('/login')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.user.lastName', expected_value='Name')\n\n",
 "19": "    @clear_session({'spanId': 19})\n    def test_19_get_orders(self):\n        # GET http://front-end/orders (endp 19)\n        front_end = get_http_client('http://front-end', authenticate)\n        resp = front_end.get('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$[*].address.city', expected_value='Glasgow')\n\n",
 "20": "    @clear_session({'spanId': 20})\n    def test_20_get_orders_href(self):\n        # GET http://front-end/orders (endp 19)\n        front_end = get_http_client('http://front-end', authenticate)\n        resp = front_end.get('/orders', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(201)\n        resp.assert_jsonpath('$[*].address.city', expected_value='Glasgow')\n        href = url_part('/2', jsonpath('$[*]._links.self.href', resp))\n\n        # GET http://front-end/orders/{href} (endp 20)\n        resp = front_end.get(f'/orders/{href}', headers=dict([('x-requested-with', 'XMLHttpRequest')]))\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n\n",
 "36": "    @json_dataset('data/dataset_36.json')\n    @clear_session({'spanId': 36})\n    def test_36_get_orders_href(self, data_row):\n        href, = data_row\n\n        # GET http://orders/orders/{href} (endp 36)\n        orders = get_http_client('http://orders', authenticate)\n        resp = orders.get(f'/orders/{href}')\n        resp.assert_status_code(200)\n        resp.assert_jsonpath('$.address.city', expected_value='Glasgow')\n\n",
 "38": "    @json_dataset('data/dataset_38.json')\n    @clear_session({'spanId': 38})\n    def test_38_post_paymentAuth(self, data_row):\n        ccv, country, expires, id_, id1, id2, longNum, number, postcode, street = data_row\n\n        # POST http://payment/paymentAuth (endp 38)\n        payment = get_http_client('http://payment', authenticate)\n        with open('data/payload_for_endp_38.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.address.country', country)\n        apply_into_json(json_payload, '$.address.id', id_)\n        apply_into_json(json_payload, '$.address.number', number)\n        apply_into_json(json_payload, '$.address.postcode', postcode)\n        apply_into_json(json_payload, '$.address.street', street)\n        apply_into_json(json_payload, '$.amount', float(random.uniform(12.98, 122.979996)))\n        apply_into_json(json_payload, '$.card.ccv', ccv)\n        apply_into_json(json_payload, '$.card.expires', expires)\n        apply_into_json(json_payload, '$.card.id', id1)\n        apply_into_json(json_payload, '$.card.longNum', longNum)\n        apply_into_json(json_payload, '$.customer.id', id2)\n        resp = payment.post('/paymentAuth', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(200)\n\n",
 "39": "    @json_dataset('data/dataset_39.json')\n    @clear_session({'spanId': 39})\n    def test_39_post_shipping(self, data_row):\n        name, = data_row\n\n        # POST http://shipping/shipping (endp 39)\n        shipping = get_http_client('http://shipping', authenticate)\n        with open('data/payload_for_endp_39.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.id', str(uuid.uuid4()))\n        apply_into_json(json_payload, '$.name', name)\n        resp = shipping.post('/shipping', json=json_payload, headers=dict([('accept', 'application/json')]))\n        resp.assert_status_code(201)\n\n",
 "30": "    @clear_session({'spanId': 30})\n    def test_30_get_tags(self):\n        # GET http://catalogue/tags (endp 30)\n        catalogue = get_http_client('http://catalogue', authenticate)\n        resp = catalogue.get('/tags')\n        resp.assert_status_code(200)\n\n"
}