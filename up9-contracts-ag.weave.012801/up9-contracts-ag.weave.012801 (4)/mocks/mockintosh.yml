# This is a Mockintosh configuration file.
# Mockintosh provides a microservices friendly, small footprint HTTP mock service.
# A standard laptop can run dozens of Mockintosh instances, or you can run all instances in a single Docker container.
#
# Install Mockintosh:                 pip3 install mockintosh
# Run locally:                        mockintosh <this-file>
# Run with Docker:                    docker run -it -p 8000-8005:8000-8005 -v `pwd`:/tmp testrio/mockintosh /tmp/<this-file>
# More information can be found here: https://github.com/up9inc/mockintosh

---
services:
- endpoints:
  - method: delete
    path: /carts/{{customerId}}
    response:
      status: 202
  - method: post
    path: /carts/{{customerId}}/items
    response:
      body: |-
        {
         "id": "6013624736d1a00006ef29fd",
         "itemId": "{{request.body}}",
         "quantity": 1,
         "unitPrice": {{random.float 7.99 99.99 2}}
        }
      headers:
        Content-Type: application/json
      status: 201
  - path: /carts/{{customerId}}/merge
    response:
      status: 202
  - path: /carts/{{customerId}}/items
    response:
      body: '[{"id":"6013624736d1a00006ef29fd","itemId":"510a0d7e-8e83-4193-b483-e27e09ddc34d","quantity":1,"unitPrice":15.0}]'
      headers:
        Content-Type: application/json
      useTemplating: false
  name: http://carts
  port: 8001
  ssl: false
- endpoints:
  - path: /catalogue
    response:
      body: '@mock-data/resp_1.json'
      headers:
        Content-Type: application/json
  - path: /catalogue/{{id}}
    response:
      body: '@mock-data/resp_2.json'
      headers:
        Content-Type: application/json
  name: http://catalogue
  port: 8002
  ssl: false
- endpoints:
  - path: /
    response:
      body: '@mock-data/resp_11.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /basket.html
    response:
      body: '@mock-data/resp_12.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - method: delete
    path: /cart
    response:
      headers:
        Content-Type: text/plain
      status: 202
  - method: post
    path: /cart
    response:
      headers:
        Content-Type: text/plain
      status: 201
  - path: /catalogue
    response:
      body: '@mock-data/resp_15.json'
      headers:
        Content-Type: application/json
  - path: /category.html
    response:
      body: '@mock-data/resp_16.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /detail.html
    response:
      body: '@mock-data/resp_17.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /login
    response:
      body: Cookie is set
      headers:
        Content-Type: text/html
      useTemplating: false
  - method: post
    path: /orders
    response:
      body: '@mock-data/resp_19.json'
      headers:
        Content-Type: application/json
      status: 201
  name: http://edge-router
  port: 8003
  ssl: false
- endpoints:
  - path: /
    response:
      body: '@mock-data/resp_20.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /basket.html
    response:
      body: '@mock-data/resp_21.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /catalogue
    response:
      body: '@mock-data/resp_22.json'
      headers:
        Content-Type: application/json
  - path: /category.html
    response:
      body: '@mock-data/resp_23.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /detail.html
    response:
      body: '@mock-data/resp_24.html'
      headers:
        Content-Type: text/html
      useTemplating: false
  - path: /login
    response:
      body: Cookie is set
      headers:
        Content-Type: text/html
      useTemplating: false
  - method: delete
    path: /cart
    response:
      status: 202
  - method: post
    path: /cart
    response:
      status: 201
  - method: post
    path: /orders
    response:
      body: '@mock-data/resp_28.json'
      headers:
        Content-Type: application/json
      status: 201
  name: http://front-end
  port: 8004
  ssl: false
- endpoints:
  - method: post
    path: /orders
    response:
      body: '@mock-data/resp_10.json'
      headers:
        Content-Type: application/json
      status: 201
  name: http://orders
  port: 8005
  ssl: false
- endpoints:
  - method: post
    path: /paymentAuth
    response:
      body: '{"authorised":true,"message":"Payment authorised"}'
      headers:
        Content-Type: application/json
      useTemplating: false
  name: http://payment
  port: 8006
  ssl: false
- endpoints:
  - method: post
    path: /shipping
    response:
      body: |-
        {
         "id": "{{request.body}}",
         "name": "{{request.body}}"
        }
      headers:
        Content-Type: application/json
      status: 201
  name: http://shipping
  port: 8007
  ssl: false
- endpoints:
  - path: /customers/{{customerId}}
    response:
      body: '@mock-data/resp_3.json'
      headers:
        Content-Type: application/json
  - path: /customers/{{customerId}}/addresses
    response:
      body: '@mock-data/resp_4.json'
      headers:
        Content-Type: application/json
      useTemplating: false
  - path: /customers/{{customerId}}/cards
    response:
      body: '{"_embedded":{"card":[{"longNum":"5544154011345918","expires":"08/19","ccv":"958","id":"57a98d98e4b00679b4a830b1","_links":{"card":{"href":"http://user/cards/57a98d98e4b00679b4a830b1"},"self":{"href":"http://user/cards/57a98d98e4b00679b4a830b1"}}}]}}'
      headers:
        Content-Type: application/json
      useTemplating: false
  - path: /login
    response:
      body: '@mock-data/resp_6.json'
      headers:
        Content-Type: application/json
      useTemplating: false
  - path: /addresses/{{addresseId}}
    response:
      body: '@mock-data/resp_30.json'
      headers:
        Content-Type: application/json
  - path: /cards/{{cardId}}
    response:
      body: |-
        {
         "longNum": "5544154011345918",
         "expires": "08/19",
         "ccv": "958",
         "id": "{{request.path.[2]}}",
         "_links": {
          "card": {
           "href": "http://user/cards/57a98d98e4b00679b4a830b1"
          },
          "self": {
           "href": "http://user/cards/57a98d98e4b00679b4a830b1"
          }
         }
        }
      headers:
        Content-Type: application/json
  name: http://user
  port: 8008
  ssl: false
