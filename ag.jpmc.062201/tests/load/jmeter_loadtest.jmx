<?xml version='1.0' encoding='UTF-8'?>
<jmeterTestPlan>
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testname="BZT Generated Test Plan" testclass="TestPlan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments"/>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables from Taurus">
        <collectionProp name="Arguments.arguments">
          <elementProp name="account_chase_com" elementType="Argument">
            <stringProp name="Argument.name">account_chase_com</stringProp>
            <stringProp name="Argument.value">https://account.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="autofinance_chase_com" elementType="Argument">
            <stringProp name="Argument.name">autofinance_chase_com</stringProp>
            <stringProp name="Argument.value">https://autofinance.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="creditcards_chase_com" elementType="Argument">
            <stringProp name="Argument.name">creditcards_chase_com</stringProp>
            <stringProp name="Argument.value">https://creditcards.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="locator_chase_com" elementType="Argument">
            <stringProp name="Argument.name">locator_chase_com</stringProp>
            <stringProp name="Argument.value">https://locator.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="midas_chase_com" elementType="Argument">
            <stringProp name="Argument.name">midas_chase_com</stringProp>
            <stringProp name="Argument.value">https://midas.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="personal_chase_com" elementType="Argument">
            <stringProp name="Argument.name">personal_chase_com</stringProp>
            <stringProp name="Argument.value">https://personal.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure01a_chase_com" elementType="Argument">
            <stringProp name="Argument.name">secure01a_chase_com</stringProp>
            <stringProp name="Argument.value">https://secure01a.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure01b_chase_com" elementType="Argument">
            <stringProp name="Argument.name">secure01b_chase_com</stringProp>
            <stringProp name="Argument.value">https://secure01b.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure03b_chase_com" elementType="Argument">
            <stringProp name="Argument.name">secure03b_chase_com</stringProp>
            <stringProp name="Argument.value">https://secure03b.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure05b_chase_com" elementType="Argument">
            <stringProp name="Argument.name">secure05b_chase_com</stringProp>
            <stringProp name="Argument.value">https://secure05b.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure07a_chase_com" elementType="Argument">
            <stringProp name="Argument.name">secure07a_chase_com</stringProp>
            <stringProp name="Argument.value">https://secure07a.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sites_chase_com" elementType="Argument">
            <stringProp name="Argument.name">sites_chase_com</stringProp>
            <stringProp name="Argument.value">https://sites.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="target_chase_com" elementType="Argument">
            <stringProp name="Argument.name">target_chase_com</stringProp>
            <stringProp name="Argument.value">https://target.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="www_chase_com" elementType="Argument">
            <stringProp name="Argument.name">www_chase_com</stringProp>
            <stringProp name="Argument.value">https://www.chase.com</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Unknown ag.jpmc.062201" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
      </ThreadGroup>
      <hashTree type="tg">
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookies">
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">false</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults">
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="user_defined"/>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="locale" elementType="HTTPArgument">
                <stringProp name="Argument.name">locale</stringProp>
                <stringProp name="Argument.value">en_US</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">${locator_chase_com}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/adspace">
          <stringProp name="HTTPSampler.path">${locator_chase_com}/adspace</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/account.chase.com/consumer/banking/seo">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/account.chase.com/consumer/banking/seo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/autofinance.chase.com/auto-finance/auto-loans">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/autofinance.chase.com/auto-finance/auto-loans</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/autofinance.chase.com/auto-finance/home">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/autofinance.chase.com/auto-finance/home</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/creditcards.chase.com/cash-back-credit-cards">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/creditcards.chase.com/cash-back-credit-cards</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/creditcards.chase.com/cash-back-credit-cards/freedom/flex">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/creditcards.chase.com/cash-back-credit-cards/freedom/flex</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/locator.chase.com/">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/locator.chase.com/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/locator.chase.com/es">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/locator.chase.com/es</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/locator.chase.com/search">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/locator.chase.com/search</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/personal.chase.com/personal/checking">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/personal.chase.com/personal/checking</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/content/chase-ux/en/structured/module/direct-to-dealer/primary-tool-liquid">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/content/chase-ux/en/structured/module/direct-to-dealer/primary-tool-liquid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/personal/investments/advisor">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/personal/investments/advisor</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/personal/investments/advisor-contact-form">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/personal/investments/advisor-contact-form</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/personal/mortgage/mortgage-refinance">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/personal/mortgage/mortgage-refinance</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/apps/services/tags/https/www.chase.com/personal/offers/marketplace">
          <stringProp name="HTTPSampler.path">${www_chase_com}/apps/services/tags/https/www.chase.com/personal/offers/marketplace</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${autofinance_chase_com}/auto-finance/auto-loans">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="offercode" elementType="HTTPArgument">
                <stringProp name="Argument.name">offercode</stringProp>
                <stringProp name="Argument.value">WDXDPXXX03</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">${autofinance_chase_com}/auto-finance/auto-loans</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${autofinance_chase_com}/auto-finance/home">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="offercode" elementType="HTTPArgument">
                <stringProp name="Argument.name">offercode</stringProp>
                <stringProp name="Argument.value">WDXDPXXX03</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">${autofinance_chase_com}/auto-finance/home</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://creditcards.chase.com/cash-back-credit-cards'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get CELL">
              <stringProp name="HtmlExtractor.refname">CELL</stringProp>
              <stringProp name="HtmlExtractor.expr">div div header.header-navigation section.desktop-header section.header-navigation__content.row section nav ul li div.header-navigation__dropdown.hide ul li.colored a.regular-link.chaseanalytics-track-link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${creditcards_chase_com}/cash-back-credit-cards">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CELL" elementType="HTTPArgument">
                  <stringProp name="Argument.name">CELL</stringProp>
                  <stringProp name="Argument.value">6TKV</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jp_ltg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">jp_ltg</stringProp>
                  <stringProp name="Argument.value">chsecate_cashback</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${creditcards_chase_com}/cash-back-credit-cards</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://creditcards.chase.com/cash-back-credit-cards/freedom/flex'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get CELL">
              <stringProp name="HtmlExtractor.refname">CELL</stringProp>
              <stringProp name="HtmlExtractor.expr">div div header.header-navigation section.desktop-header section.header-navigation__content.row section nav ul li div.header-navigation__dropdown.hide ul li.colored a.regular-link.chaseanalytics-track-link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${creditcards_chase_com}/cash-back-credit-cards/freedom/flex">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CELL" elementType="HTTPArgument">
                  <stringProp name="Argument.name">CELL</stringProp>
                  <stringProp name="Argument.value">6TKV</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${creditcards_chase_com}/cash-back-credit-cards/freedom/flex</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://account.chase.com/consumer/banking/seo'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ssv_creativeid">
              <stringProp name="JSONPostProcessor.referenceNames">ssv_creativeid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].turl</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${account_chase_com}/consumer/banking/seo">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="jp_aid_a" elementType="HTTPArgument">
                  <stringProp name="Argument.name">jp_aid_a</stringProp>
                  <stringProp name="Argument.value">T_65597</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jp_aid_p" elementType="HTTPArgument">
                  <stringProp name="Argument.name">jp_aid_p</stringProp>
                  <stringProp name="Argument.value">retail_checking_hp/tile</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${account_chase_com}/consumer/banking/seo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'POST https://account.chase.com/consumer/banking/seo'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ssv_creativeid">
              <stringProp name="JSONPostProcessor.referenceNames">ssv_creativeid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].turl</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${account_chase_com}/consumer/banking/seo?jp_aid_a=T_65597&amp;jp_aid_p=retail_checking_hp/tile">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Payload_ContactPoint" elementType="HTTPArgument">
                  <stringProp name="Argument.name">Payload_ContactPoint</stringProp>
                  <stringProp name="Argument.value">john.dow.1981@protonmail.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Payload_IsDaoWithEmailSubmission" elementType="HTTPArgument">
                  <stringProp name="Argument.name">Payload_IsDaoWithEmailSubmission</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Payload_IsEmailSubmission" elementType="HTTPArgument">
                  <stringProp name="Argument.name">Payload_IsEmailSubmission</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Payload_ProductSelection" elementType="HTTPArgument">
                  <stringProp name="Argument.name">Payload_ProductSelection</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Payload_ValidationMsg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">Payload_ValidationMsg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="device_type" elementType="HTTPArgument">
                  <stringProp name="Argument.name">device_type</stringProp>
                  <stringProp name="Argument.value">Desktop</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="form_build_id" elementType="HTTPArgument">
                  <stringProp name="Argument.name">form_build_id</stringProp>
                  <stringProp name="Argument.value">form-QR8cRbDVvfdnBf5L3N0G8fD0lXY6X6Q9vrFTdqu8Bno</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="form_id" elementType="HTTPArgument">
                  <stringProp name="Argument.name">form_id</stringProp>
                  <stringProp name="Argument.value">email_my_coupon</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gclid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">gclid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="optimizelyID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">optimizelyID</stringProp>
                  <stringProp name="Argument.value">default</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prd_link" elementType="HTTPArgument">
                  <stringProp name="Argument.name">prd_link</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="referingURL" elementType="HTTPArgument">
                  <stringProp name="Argument.name">referingURL</stringProp>
                  <stringProp name="Argument.value">https://personal.chase.com/</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v1stCookie" elementType="HTTPArgument">
                  <stringProp name="Argument.name">v1stCookie</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${account_chase_com}/consumer/banking/seo?jp_aid_a=T_65597&amp;jp_aid_p=retail_checking_hp/tile</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Heroes/{heroeId}/June/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">66369_CB_CHK_V1_hero_R-867.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="heroeId" elementType="Argument">
                  <stringProp name="Argument.name">heroeId</stringProp>
                  <stringProp name="Argument.value">2021</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Heroes/${heroeId}/June/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Heroes/${heroeId}/June/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Tiles/{tileId}/March/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">65597_cb_225-checking-only_restile_r-867.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tileId" elementType="Argument">
                  <stringProp name="Argument.name">tileId</stringProp>
                  <stringProp name="Argument.value">2021</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Tiles/${tileId}/March/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Tiles/${tileId}/March/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Triplets/{tripletId}/July/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">n3131118-credit-card-related-services-triplet-responsive52153.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tripletId" elementType="Argument">
                  <stringProp name="Argument.name">tripletId</stringProp>
                  <stringProp name="Argument.value">2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/July/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/July/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Triplets/{tripletId}/March/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">62235_cb_totalchecking200_triplet_r-1005.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tripletId" elementType="Argument">
                  <stringProp name="Argument.name">tripletId</stringProp>
                  <stringProp name="Argument.value">2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/March/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/March/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Triplets/{tripletId}/May/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">66023_cb_cfb_triplet_r-2179.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tripletId" elementType="Argument">
                  <stringProp name="Argument.name">tripletId</stringProp>
                  <stringProp name="Argument.value">2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/May/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/May/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://sites.chase.com/content/Creatives/Public/Triplets/{tripletId}/November/{cid}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">64102_cb_secure-25-offer-triplet_responsivetriplet_r-1560.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tripletId" elementType="Argument">
                  <stringProp name="Argument.name">tripletId</stringProp>
                  <stringProp name="Argument.value">2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/November/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Triplets/${tripletId}/November/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param}/carousel-single-images/{imageId}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="imageId" elementType="Argument">
                  <stringProp name="Argument.name">imageId</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/carousel-single-images/${imageId}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/carousel-single-images/${imageId}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param}/personal/investments/{investmentId}/{iconId}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="iconId" elementType="Argument">
                  <stringProp name="Argument.name">iconId</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="investmentId" elementType="Argument">
                  <stringProp name="Argument.name">investmentId</stringProp>
                  <stringProp name="Argument.value">advisor-plan-approach-expert-3up</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/investments/${investmentId}/${iconId}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/investments/${investmentId}/${iconId}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/personal/mortgage/cta/call-online-comein-grey/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/cta/call-online-comein-grey/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/cta/call-online-comein-grey/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/personal/mortgage/mortgage-refinance-hero/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance-hero/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance-hero/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/personal/mortgage/mortgage-refinance-hero/refinance-hero/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance-hero/refinance-hero/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance-hero/refinance-hero/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/personal/mortgage/mortgage-refinance/mortgage-refinance-bucket/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance/mortgage-refinance-bucket/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/mortgage-refinance/mortgage-refinance-bucket/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/personal/mortgage/refinance-lp/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/refinance-lp/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/personal/mortgage/refinance-lp/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/chase-ux/en/structured/module/{param1}/prod-public-lucy-advisor-contact-form-mbox/{param2}/module.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/prod-public-lucy-advisor-contact-form-mbox/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/prod-public-lucy-advisor-contact-form-mbox/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/direct-to-dealer/primary-tool-liquid">
          <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/direct-to-dealer/primary-tool-liquid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://www.chase.com/content/experience-fragments/microsites/lucy-form/lucylandingpage/master/{param}/root.html'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/experience-fragments/microsites/lucy-form/lucylandingpage/master/${param}/root.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/experience-fragments/microsites/lucy-form/lucylandingpage/master/${param}/root.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'POST https://secure01b.chase.com/events/{eventId}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eventId" elementType="Argument">
                  <stringProp name="Argument.name">eventId</stringProp>
                  <stringProp name="Argument.value">rb_f080783c-7a3e-490c-84ba-346ef2d12e98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="Argument">
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">v_4_srv_18_sn_810D4AF9DD95E7C2CF6D6738FBAE711C_perc_100000_ol_0_mul_1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure01b_chase_com}/events/${eventId}?app=8e4c3cc543ee1dcb&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure01b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index&amp;session=${session}&amp;svrid=18&amp;type=js&amp;visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">$a=1%7C2%7Crx_visittag%3Dapptel%28F578EE0FC62B3100%29%7C_rs_%7C-%7C1624383378073%7C1624383378073%7C-1$rId=RID_-480103777$rpId=1115508788$md=mdcc1%2Clocale%253Den_us%257Cpfid%253D%257Csegment%253D%257CAOC%253D%257Cpm%253D%257Capc%253D%257C$url=https%3A%2F%2Fsecure01b.chase.com%2Fweb%2Fauth%2Flogonbox%3Flang%3Den%26fromOrigin%3Dhttps%253A%252F%252Fwww.chase.com%23%2Flogonbox%2Findex%2Findex$title=Chase%20Account%20login$vd=28$latC=66$app=8e4c3cc543ee1dcb$visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT$vs=2$fId=183378050_586$v=10173190807103944$vID=1624383378054TG973IRH4T9JKNLB39GEFE1UH90R9T03$nV=1$nVAT=1$time=1624383378081$cs=491892330</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure01b_chase_com}/events/${eventId}?app=8e4c3cc543ee1dcb&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure01b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'POST https://secure05b.chase.com/events/{eventId}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eventId" elementType="Argument">
                  <stringProp name="Argument.name">eventId</stringProp>
                  <stringProp name="Argument.value">rb_f080783c-7a3e-490c-84ba-346ef2d12e98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="Argument">
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">v_4_srv_18_sn_810D4AF9DD95E7C2CF6D6738FBAE711C_perc_100000_ol_0_mul_1_app-3A8e4c3cc543ee1dcb_1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure05b_chase_com}/events/${eventId}?app=9debe78332458b14&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure05b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index&amp;session=${session}&amp;svrid=18&amp;type=js&amp;visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">$a=1%7C2%7Crx_visittag%3Dapptel%28F578EE0FC62B3100%29%7C_rs_%7C-%7C1624383451393%7C1624383451393%7C-1$rId=RID_-480103777$rpId=787885520$url=https%3A%2F%2Fsecure05b.chase.com%2Fweb%2Fauth%2Flogonbox%3Flang%3Den%26fromOrigin%3Dhttps%253A%252F%252Fwww.chase.com%23%2Flogonbox%2Findex%2Findex$title=Chase%20Account%20login$vd=26$latC=116$app=9debe78332458b14$visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT$vs=2$fId=183451370_135$v=10173190807103944$vID=1624383378054TG973IRH4T9JKNLB39GEFE1UH90R9T03$time=1624383451399$cs=1164604401</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure05b_chase_com}/events/${eventId}?app=9debe78332458b14&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure05b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'POST https://secure03b.chase.com/events/{eventId}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eventId" elementType="Argument">
                  <stringProp name="Argument.name">eventId</stringProp>
                  <stringProp name="Argument.value">rb_f080783c-7a3e-490c-84ba-346ef2d12e98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="Argument">
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">v_4_srv_18_sn_810D4AF9DD95E7C2CF6D6738FBAE711C_perc_100000_ol_0_mul_1_app-3A8e4c3cc543ee1dcb_1_app-3A9debe78332458b14_1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure03b_chase_com}/events/${eventId}?app=408c704037bea1da&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure03b.chase.com/web/auth/logonbox?fromOrigin=https%3A%2F%2Fwww.chase.com&amp;navKey=reviewCreditCardOffers&amp;lang=en#/logonbox/index/index&amp;session=${session}&amp;svrid=18&amp;type=js&amp;visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">$a=1%7C2%7Crx_visittag%3Dapptel%28F578EE0FC62B3100%29%7C_rs_%7C-%7C1624383468240%7C1624383468240%7C-1$rId=RID_-1094793546$rpId=-854813199$url=https%3A%2F%2Fsecure03b.chase.com%2Fweb%2Fauth%2Flogonbox%3FfromOrigin%3Dhttps%253A%252F%252Fwww.chase.com%26navKey%3DreviewCreditCardOffers%26lang%3Den%23%2Flogonbox%2Findex%2Findex$title=Chase%20Account%20login$vd=28$latC=77$app=408c704037bea1da$visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT$vs=2$fId=183468216_634$v=10173190807103944$vID=1624383378054TG973IRH4T9JKNLB39GEFE1UH90R9T03$time=1624383468250$cs=-684120267</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure03b_chase_com}/events/${eventId}?app=408c704037bea1da&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure03b.chase.com/web/auth/logonbox?fromOrigin=https%3A%2F%2Fwww.chase.com&amp;navKey=reviewCreditCardOffers&amp;lang=en</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'POST https://secure07a.chase.com/events/{eventId}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eventId" elementType="Argument">
                  <stringProp name="Argument.name">eventId</stringProp>
                  <stringProp name="Argument.value">rb_f080783c-7a3e-490c-84ba-346ef2d12e98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="session" elementType="Argument">
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">v_4_srv_18_sn_810D4AF9DD95E7C2CF6D6738FBAE711C_perc_100000_ol_0_mul_1_app-3A8e4c3cc543ee1dcb_1_app-3A9debe78332458b14_1_app-3A408c704037bea1da_1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure07a_chase_com}/events/${eventId}?app=7475b16d0f4ff140&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure07a.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index&amp;session=${session}&amp;svrid=18&amp;type=js&amp;visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">$a=1%7C2%7Crx_visittag%3Dapptel%28F578EE0FC62B3100%29%7C_rs_%7C-%7C1624383488225%7C1624383488225%7C-1$rId=RID_-480103777$rpId=802685791$md=mdcc4%2Clocale%253Den_us%257Cpfid%253D%257Csegment%253D%257CAOC%253D%257Cpm%253D%257Capc%253D%257C$url=https%3A%2F%2Fsecure07a.chase.com%2Fweb%2Fauth%2Flogonbox%3Flang%3Den%26fromOrigin%3Dhttps%253A%252F%252Fwww.chase.com%23%2Flogonbox%2Findex%2Findex$title=Chase%20Account%20login$vd=31$latC=71$app=7475b16d0f4ff140$visitID=JHCIHRNKLUJAIGNAPNOPFALILPILFFCT$vs=2$fId=183488198_769$v=10173190807103944$vID=1624383378054TG973IRH4T9JKNLB39GEFE1UH90R9T03$time=1624383488231$cs=109947626</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure07a_chase_com}/events/${eventId}?app=7475b16d0f4ff140&amp;flavor=post&amp;modifiedSince=1624273847426&amp;referer=https://secure07a.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'POST https://secure01a.chase.com/events/{eventId}'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eventId" elementType="Argument">
                  <stringProp name="Argument.name">eventId</stringProp>
                  <stringProp name="Argument.value">rb_f080783c-7a3e-490c-84ba-346ef2d12e98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure01a_chase_com}/events/${eventId}?app=540c26f81f8bb89d&amp;flavor=post&amp;modifiedSince=1626690539263&amp;referer=https://secure01a.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index&amp;session=v_4_srv_1_sn_33C2918EB87DF34C47BFA0DA476520FA_perc_100000_ol_0_mul_1_app-3A540c26f81f8bb89d_1&amp;svrid=1&amp;type=js&amp;visitID=CFJEOBJNNNFNLCCJCAKPJHJLFCHDAGJJ">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">$a=1%7C2%7Crx_visittag%3Dapptel%28B8799E784FECE99D%29%7C_rs_%7C-%7C1626701075231%7C1626701075231%7C-1$rId=RID_-480103777$rpId=383699662$md=mdcc4%2Clocale%253Den_us%257Cpfid%253D%257Csegment%253D%257CAOC%253D%257Cpm%253D%257Capc%253D%257C$url=https%3A%2F%2Fsecure01a.chase.com%2Fweb%2Fauth%2Flogonbox%3Flang%3Den%26fromOrigin%3Dhttps%253A%252F%252Fwww.chase.com%23%2Flogonbox%2Findex%2Findex$title=Chase%20Account%20login$vd=25$latC=419$app=540c26f81f8bb89d$visitID=CFJEOBJNNNFNLCCJCAKPJHJLFCHDAGJJ$vs=2$fId=101075210_577$v=10173190807103944$vID=1626701075214B3DQRRVE3EU3U0R3HAL5TVLC9I9EN80F$nV=1$nVAT=1$time=1626701075237$cs=-555292127</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure01a_chase_com}/events/${eventId}?app=540c26f81f8bb89d&amp;flavor=post&amp;modifiedSince=1626690539263&amp;referer=https://secure01a.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'POST https://secure01b.chase.com/events/analytics/public/v1/events/raw/'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get referrerURL">
              <stringProp name="HtmlExtractor.refname">referrerURL</stringProp>
              <stringProp name="HtmlExtractor.expr">div div header.header-navigation section.mobile-header div.row section a.chaseanalytics-track-link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure01b_chase_com}/events/analytics/public/v1/events/raw/">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">{
 "events": [
  {
   "app": {
    "language": "en-us",
    "name": "logonbox",
    "version": "1.3"
   },
   "device": {
    "browserLang": "en-US",
    "browserRes": "0x0",
    "colorDepth": 30,
    "isBT": null,
    "javaScriptVer": "1.8.5",
    "screenRes": "2560x1067"
   },
   "location": {
    "server_offset": -50,
    "timezone": "PDT",
    "tz_offset": "-7"
   },
   "payload": {
    "data": {
     "redirectScreen": false,
     "referrerURL": "https://www.chase.com/"
    },
    "eventType": "screen",
    "timestamp": 1624383379288
   },
   "screen": {
    "currentURL": "https://secure01b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index",
    "id": "/cpo/logon/index"
   },
   "site": "chase3.0",
   "visitor": {
    "adobeData": "1914845758|MCIDTS|17564|MCMID|18246491610380031420415917791160738241|MCAID|NONE|MCOPTOUT|isoptedout-false|MCAAMLH|7|MCAAMB|6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y|MCCIDH||MCSYNCSOP|411-17568|vVersion|2.3.0",
    "profileId": "",
    "segment": "",
    "visitorId": "F578EE0FC62B3100",
    "visitorType": "unknwn",
    "s_vi": "[CS]v1|F578EE0FC62B3100-03069A5D6AFFADB0[CE]"
   }
  }
 ]
}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure01b_chase_com}/events/analytics/public/v1/events/raw/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'POST https://secure05b.chase.com/events/analytics/public/v1/events/raw/'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get referrerURL">
              <stringProp name="HtmlExtractor.refname">referrerURL</stringProp>
              <stringProp name="HtmlExtractor.expr">div div header.header-navigation section.mobile-header div.row section a.chaseanalytics-track-link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure05b_chase_com}/events/analytics/public/v1/events/raw/">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">{
 "events": [
  {
   "app": {
    "language": "en-us",
    "name": "logonbox",
    "version": "1.3"
   },
   "device": {
    "browserLang": "en-US",
    "browserRes": "0x0",
    "colorDepth": 30,
    "isBT": null,
    "javaScriptVer": "1.8.5",
    "screenRes": "2560x1067"
   },
   "location": {
    "server_offset": -54,
    "timezone": "PDT",
    "tz_offset": "-7"
   },
   "payload": {
    "data": {
     "redirectScreen": false,
     "referrerURL": "https://www.chase.com/"
    },
    "eventType": "screen",
    "timestamp": 1624383452456
   },
   "screen": {
    "currentURL": "https://secure05b.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index",
    "id": "/cpo/logon/index"
   },
   "site": "chase3.0",
   "visitor": {
    "adobeData": "1914845758|MCIDTS|17564|MCMID|18246491610380031420415917791160738241|MCAID|NONE|MCOPTOUT|isoptedout-false|MCAAMLH|7|MCAAMB|6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y|MCCIDH||MCSYNCSOP|411-17568|vVersion|2.3.0|TESTPROFILE|false",
    "profileId": "",
    "segment": "",
    "visitorId": "F578EE0FC62B3100",
    "visitorType": "unknwn",
    "s_vi": "[CS]v1|F578EE0FC62B3100-03069A5D6AFFADB0[CE]"
   }
  }
 ]
}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure05b_chase_com}/events/analytics/public/v1/events/raw/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure03b_chase_com}/events/analytics/public/v1/events/raw/">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="elementProp" elementType="HTTPArgument">
                <stringProp name="Argument.value">{}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">${secure03b_chase_com}/events/analytics/public/v1/events/raw/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4 steps for 'POST https://secure07a.chase.com/events/analytics/public/v1/events/raw/'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="metaId" elementType="Argument">
                  <stringProp name="Argument.name">metaId</stringProp>
                  <stringProp name="Argument.value">ATM-CA7403</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/search">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="l" elementType="HTTPArgument">
                  <stringProp name="Argument.name">l</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">94303</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${locator_chase_com}/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get metaId">
              <stringProp name="JSONPostProcessor.referenceNames">metaId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.entities[*].profile.*[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/atmsearch">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="metaId" elementType="HTTPArgument">
                  <stringProp name="Argument.name">metaId</stringProp>
                  <stringProp name="Argument.value">${metaId}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${locator_chase_com}/atmsearch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get redirectScreen">
              <stringProp name="JSONPostProcessor.referenceNames">redirectScreen</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.schema.alternateWebsites.archived</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get referrerURL">
              <stringProp name="HtmlExtractor.refname">referrerURL</stringProp>
              <stringProp name="HtmlExtractor.expr">div div header.header-navigation section.mobile-header div.row section a.chaseanalytics-track-link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure07a_chase_com}/events/analytics/public/v1/events/raw/">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">{
 "events": [
  {
   "app": {
    "language": "en-us",
    "name": "logonbox",
    "version": "1.3"
   },
   "device": {
    "browserLang": "en-US",
    "browserRes": "0x0",
    "colorDepth": 30,
    "isBT": null,
    "javaScriptVer": "1.8.5",
    "screenRes": "2560x1067"
   },
   "location": {
    "server_offset": -35,
    "timezone": "PDT",
    "tz_offset": "-7"
   },
   "payload": {
    "data": {
     "redirectScreen": false,
     "referrerURL": "https://www.chase.com/"
    },
    "eventType": "screen",
    "timestamp": 1624383489249
   },
   "screen": {
    "currentURL": "https://secure07a.chase.com/web/auth/logonbox?lang=en&amp;fromOrigin=https%3A%2F%2Fwww.chase.com#/logonbox/index/index",
    "id": "/cpo/logon/index"
   },
   "site": "chase3.0",
   "visitor": {
    "adobeData": "1914845758|MCIDTS|17564|MCMID|18246491610380031420415917791160738241|MCAID|NONE|MCOPTOUT|isoptedout-false|MCAAMLH|7|MCAAMB|6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y|MCCIDH||MCSYNCSOP|411-17568|vVersion|2.3.0|TESTPROFILE|false",
    "profileId": "",
    "segment": "",
    "visitorId": "F578EE0FC62B3100",
    "visitorType": "unknwn",
    "s_vi": "[CS]v1|F578EE0FC62B3100-03069A5D6AFFADB0[CE]"
   }
  }
 ]
}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure07a_chase_com}/events/analytics/public/v1/events/raw/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${personal_chase_com}/personal/checking">
          <stringProp name="HTTPSampler.path">${personal_chase_com}/personal/checking</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/personal/investments/advisor-contact-form">
          <stringProp name="HTTPSampler.path">${www_chase_com}/personal/investments/advisor-contact-form</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/personal/mortgage/mortgage-refinance">
          <stringProp name="HTTPSampler.path">${www_chase_com}/personal/mortgage/mortgage-refinance</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10 steps for 'POST https://target.chase.com/rest/v1/delivery'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cid" elementType="Argument">
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">65596_cb_225-checking-only_hero_r-867.dynamic.html</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="heroeId" elementType="Argument">
                  <stringProp name="Argument.name">heroeId</stringProp>
                  <stringProp name="Argument.value">2021</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param6" elementType="Argument">
                  <stringProp name="Argument.name">param6</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sessionId" elementType="Argument">
                  <stringProp name="Argument.name">sessionId</stringProp>
                  <stringProp name="Argument.value">dc609c0b914343efb801e0a76f3aaf5f</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get cid">
              <stringProp name="JSONPostProcessor.referenceNames">cid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].cid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${sites_chase_com}/content/Creatives/Public/Heroes/${heroeId}/March/${cid}">
            <stringProp name="HTTPSampler.path">${sites_chase_com}/content/Creatives/Public/Heroes/${heroeId}/March/${cid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/carousel-single-images_alt/${param6}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/carousel-single-images_alt/${param6}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/personal/investments/advisor">
            <stringProp name="HTTPSampler.path">${www_chase_com}/personal/investments/advisor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/search">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="q" elementType="HTTPArgument">
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">94303</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${locator_chase_com}/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get url">
              <stringProp name="HtmlExtractor.refname">url</stringProp>
              <stringProp name="HtmlExtractor.expr">header#Header div.Header-wrapper.l-container div.Header-mainRow div.Header-left div div.js-focustrap div a.Text--expanded[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${target_chase_com}/rest/v1/delivery?client=jpmcbankna&amp;sessionId=${sessionId}&amp;version=2.3.2">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="elementProp" elementType="HTTPArgument">
                  <stringProp name="Argument.value">{
 "context": {
  "address": {
   "referringUrl": "https://www.chase.com/",
   "url": "https://www.chase.com/"
  },
  "browser": {
   "host": "www.chase.com",
   "webGLRenderer": "ANGLE (ATI Technologies Inc., AMD Radeon Pro 5500M OpenGL Engine, OpenGL 4.1 core)"
  },
  "channel": "web",
  "screen": {
   "colorDepth": 30,
   "height": 1067,
   "orientation": "landscape",
   "pixelRatio": 2,
   "width": 2560
  },
  "timeOffsetInMinutes": -420,
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.0 Safari/537.36",
  "window": {
   "height": 921,
   "width": 2560
  }
 },
 "execute": {
  "mboxes": [
   {
    "index": 0,
    "name": "carousel-single-images-bau-alt",
    "parameters": {
     "mboxName": "carousel-single-images-bau-alt",
     "pageTitle": "Credit Card, Mortgage, Banking, Auto | Chase Online | Chase.com"
    },
    "profileParameters": {
     "v1stCookie": "F578EE0FC62B3100"
    }
   }
  ],
  "pageLoad": {}
 },
 "experienceCloud": {
  "analytics": {
   "logging": "client_side"
  },
  "audienceManager": {
   "locationHint": "7"
  }
 },
 "id": {
  "marketingCloudVisitorId": "18246491610380031420415917791160738241",
  "tntId": "dc609c0b914343efb801e0a76f3aaf5f.35_0"
 },
 "property": {
  "token": "0e815903-d1a3-d64d-7c87-ef47f1260111"
 },
 "requestId": "1b34e23cba144115b789d12e0b56fa28"
}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${target_chase_com}/rest/v1/delivery?client=jpmcbankna&amp;sessionId=${sessionId}&amp;version=2.3.2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://midas.chase.com/stream/click'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random1" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random1</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random1}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ssv_transid">
              <stringProp name="JSONPostProcessor.referenceNames">ssv_transid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].turl</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/stream/click">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_creativeid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_creativeid</stringProp>
                  <stringProp name="Argument.value">T_65597</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_midas_id" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_midas_id</stringProp>
                  <stringProp name="Argument.value">875761814908451211_tile_T_65597</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">220</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_transid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_transid</stringProp>
                  <stringProp name="Argument.value">875761814908451211</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/stream/click</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 steps for 'GET https://midas.chase.com/stream/tag'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">retail_lp_seopp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_eid</stringProp>
                  <stringProp name="Argument.value">ca_checkinghp__</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_tmc" elementType="Argument">
                  <stringProp name="Argument.name">ssv_tmc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/stream/tag">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eid</stringProp>
                  <stringProp name="Argument.value">${ssv_eid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_productid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_productid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_src" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_src</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_tmc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_tmc</stringProp>
                  <stringProp name="Argument.value">${ssv_tmc}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/stream/tag</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6 steps for 'GET https://midas.chase.com/stream/view'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.control.sampler.SetVariablesAction guiclass="kg.apc.jmeter.control.sampler.SetVariablesActionGui" testclass="kg.apc.jmeter.control.sampler.SetVariablesAction" testname="Variables from Taurus">
            <elementProp name="SetVariablesAction" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="Argument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">chasehome_3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param" elementType="Argument">
                  <stringProp name="Argument.name">param</stringProp>
                  <stringProp name="Argument.value">mbox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param1" elementType="Argument">
                  <stringProp name="Argument.name">param1</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param2" elementType="Argument">
                  <stringProp name="Argument.name">param2</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param3" elementType="Argument">
                  <stringProp name="Argument.name">param3</stringProp>
                  <stringProp name="Argument.value">carousel-single-images-bau-alt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param4" elementType="Argument">
                  <stringProp name="Argument.name">param4</stringProp>
                  <stringProp name="Argument.value">_jcr_content</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="param5" elementType="Argument">
                  <stringProp name="Argument.name">param5</stringProp>
                  <stringProp name="Argument.value">MIDASSVCS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">web_mkt-adf-version-8_0_0_05182021_200128_F578EE0FC62B3100_1624383377478_38100140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_creativeid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_creativeid</stringProp>
                  <stringProp name="Argument.value">T_65596</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale1" elementType="Argument">
                  <stringProp name="Argument.name">ssv_locale1</stringProp>
                  <stringProp name="Argument.value">en_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_midas_id" elementType="Argument">
                  <stringProp name="Argument.name">ssv_midas_id</stringProp>
                  <stringProp name="Argument.value">2808894671955032376_hero_T_65596</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="Argument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random1" elementType="Argument">
                  <stringProp name="Argument.name">ssv_random1</stringProp>
                  <stringProp name="Argument.value">524</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_transid" elementType="Argument">
                  <stringProp name="Argument.name">ssv_transid</stringProp>
                  <stringProp name="Argument.value">2808894671955032376</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st1" elementType="Argument">
                  <stringProp name="Argument.name">ssv_v1st1</stringProp>
                  <stringProp name="Argument.value">F578EE0FC62B3100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="Argument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">1624383377479</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.sampler.SetVariablesAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/primary-triplet/${param1}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/ad-geo/${param2}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html">
            <stringProp name="HTTPSampler.path">${www_chase_com}/content/chase-ux/en/structured/module/${param}/index/${param3}/${param4}/module.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageID" elementType="HTTPArgument">
                  <stringProp name="Argument.name">pageID</stringProp>
                  <stringProp name="Argument.value">${pageID}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_accttype" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_accttype</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_adf_traceid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_adf_traceid</stringProp>
                  <stringProp name="Argument.value">${ssv_adf_traceid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_cigseg" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_cigseg</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_eci" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_eci</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_origin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_origin</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">${ssv_pageLayout}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pfid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pfid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pnpc" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pnpc</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_product" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_product</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_siteacct" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_siteacct</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_sitebrand" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_sitebrand</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_userType" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_userType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_zip" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_zip</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_lids" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_lids</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_pnpcs" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_pnpcs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssvm_products" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssvm_products</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="time" elementType="HTTPArgument">
                  <stringProp name="Argument.name">time</stringProp>
                  <stringProp name="Argument.value">${time}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/prweb/PRRestService/${param5}/v1/MakeDecision</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ssv_transid">
              <stringProp name="JSONPostProcessor.referenceNames">ssv_transid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.offers[*].turl</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${midas_chase_com}/stream/view">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ssv_channel" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_channel</stringProp>
                  <stringProp name="Argument.value">web</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_creativeid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_creativeid</stringProp>
                  <stringProp name="Argument.value">${ssv_creativeid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_locale" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_locale</stringProp>
                  <stringProp name="Argument.value">${ssv_locale1}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_midas_id" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_midas_id</stringProp>
                  <stringProp name="Argument.value">${ssv_midas_id}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_pageLayout" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_pageLayout</stringProp>
                  <stringProp name="Argument.value">prospect_a</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_random" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_random</stringProp>
                  <stringProp name="Argument.value">${ssv_random1}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_transid" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_transid</stringProp>
                  <stringProp name="Argument.value">${ssv_transid}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssv_v1st" elementType="HTTPArgument">
                  <stringProp name="Argument.name">ssv_v1st</stringProp>
                  <stringProp name="Argument.value">${ssv_v1st1}</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${midas_chase_com}/stream/view</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://secure01b.chase.com/web/auth/logonbox'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get fromOrigin">
              <stringProp name="HtmlExtractor.refname">fromOrigin</stringProp>
              <stringProp name="HtmlExtractor.expr">html head link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure01b_chase_com}/web/auth/logonbox">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromOrigin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">fromOrigin</stringProp>
                  <stringProp name="Argument.value">https://www.chase.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure01b_chase_com}/web/auth/logonbox</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://secure05b.chase.com/web/auth/logonbox'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get fromOrigin">
              <stringProp name="HtmlExtractor.refname">fromOrigin</stringProp>
              <stringProp name="HtmlExtractor.expr">html head link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure05b_chase_com}/web/auth/logonbox">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromOrigin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">fromOrigin</stringProp>
                  <stringProp name="Argument.value">https://www.chase.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure05b_chase_com}/web/auth/logonbox</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://secure03b.chase.com/web/auth/logonbox'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get fromOrigin">
              <stringProp name="HtmlExtractor.refname">fromOrigin</stringProp>
              <stringProp name="HtmlExtractor.expr">html head link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure03b_chase_com}/web/auth/logonbox">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromOrigin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">fromOrigin</stringProp>
                  <stringProp name="Argument.value">https://www.chase.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="navKey" elementType="HTTPArgument">
                  <stringProp name="Argument.name">navKey</stringProp>
                  <stringProp name="Argument.value">reviewCreditCardOffers</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure03b_chase_com}/web/auth/logonbox</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://secure07a.chase.com/web/auth/logonbox'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${locator_chase_com}/search">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="q" elementType="HTTPArgument">
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">94303</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${locator_chase_com}/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get fromOrigin">
              <stringProp name="HtmlExtractor.refname">fromOrigin</stringProp>
              <stringProp name="HtmlExtractor.expr">a#brand-logo[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure07a_chase_com}/web/auth/logonbox">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromOrigin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">fromOrigin</stringProp>
                  <stringProp name="Argument.value">https://www.chase.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure07a_chase_com}/web/auth/logonbox</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 steps for 'GET https://secure01a.chase.com/web/auth/logonbox'">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${www_chase_com}/">
            <stringProp name="HTTPSampler.path">${www_chase_com}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get fromOrigin">
              <stringProp name="HtmlExtractor.refname">fromOrigin</stringProp>
              <stringProp name="HtmlExtractor.expr">html head link[href] @href</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.default">NOT_FOUND</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${secure01a_chase_com}/web/auth/logonbox">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromOrigin" elementType="HTTPArgument">
                  <stringProp name="Argument.name">fromOrigin</stringProp>
                  <stringProp name="Argument.value">https://www.chase.com</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${secure01a_chase_com}/web/auth/logonbox</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Timeout Check">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector testname="View Results Tree" testclass="ResultCollector" guiclass="ViewResultsFullVisualizer"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
